export default {
  tabs: {
    home: "Examples",
    profile: "Profile",
    components: "Components",
  },
  home: {
    title: "React Native APIs",
    subtitle: "Explore and experience common API components",
    examples: {
      flashlist: {
        title: "FlashList",
        description: "High performance list component",
      },
      image: {
        title: "Expo Image",
        description: "High performance image component",
      },
      fileSystem: {
        title: "File System",
        description: "File system example",
      },
      imagePicker: {
        title: "Image Picker",
        description: "Image picker example",
      },
      gestures: {
        title: "Gestures",
        description: "Gesture interaction example",
      },
      animation: {
        title: "Reanimated",
        description: "Smooth animation effects",
      },
      blur: {
        title: "BlurView",
        description: "Blur effect component",
      },
      camera: {
        title: "Camera",
        description: "Camera feature example",
      },
      captureRef: {
        title: "CaptureRef",
        description: "CaptureRef example",
      },
      manifests: {
        title: "Manifests",
        description: "Manifests example",
      },
    },
  },
  profile: {
    stats: {
      testedApis: "Tested APIs",
      savedExamples: "Saved Examples",
      ownProjects: "Own Projects",
    },
    settings: {
      title: "Settings",
      language: "Language Settings",
    },
    logout: "Log Out",
    name: "Developer",
    username: "@developer",
    bio: "React Native & Expo development enthusiast, enjoys trying various new APIs and components.",
  },
  common: {
    back: "Back",
    save: "Save",
    cancel: "Cancel",
    loading: "Loading...",
    success: "Success",
    error: "Error",
    delete: "Delete",
    edit: "Edit",
    create: "Create",
    language: {
      name: "English",
      english: "English",
      chinese: "Chinese",
      auto: "System Default",
    },
  },
  flashlist: {
    title: "FlashList Example",
    info: "FlashList is a high-performance list component, more efficient than FlatList and suitable for handling large amounts of data",
    loadExampleData: "Load Example Data",
    switchToEmpty: "Switch to Empty State",
    item: "Item",
    description: "This is some description text about item",
    confirmDelete: "Confirm Delete",
    confirmDeleteMessage: "Are you sure you want to delete",
    delete: "Delete",
    loadingMore: "Loading more...",
    emptyState: "No items in the list",
  },
  image: {
    title: "Expo Image Example",
    info: "Expo Image is a high-performance cross-platform image component that supports multiple formats, caching strategies and transition effects",
    contentFit: {
      title: "Content Fit Mode",
      cover: "cover",
      contain: "contain",
      fill: "fill",
      none: "none",
      scaleDown: "scale-down",
    },
    placeholder: {
      title: "Placeholder Effect (blurhash)",
      loading: "Loading...",
    },
    transition: {
      title: "Transition Effect",
      tapToChange: "Tap image to change | Current effect:",
      switchEffect: "Switch Effect",
    },
    background: {
      title: "Background Color and Blur Effect",
    },
  },
  fileSystem: {
    title: "File System Todo List",
    info: {
      fileSize: "File Size",
      lastModified: "Last Modified",
      completed: "Completed",
      storagePath: "Storage Path:",
    },
    todo: {
      addNew: "Add new todo...",
      list: "Todo List",
      export: "Export",
      clear: "Clear",
      loading: "Loading todos...",
      empty: "No todos yet",
      emptySubtext:
        "Add some todos to experience file system storage functionality",
      confirmDelete: "Delete All Todos",
      confirmDeleteMessage:
        "Are you sure you want to delete all todos? This action cannot be undone.",
      deleteSuccess: "Deleted",
      deleteSuccessMessage: "All todos have been deleted",
      exportSuccess: "Export Successful",
      exportSuccessMessage: "Todos have been backed up to:",
      error: "Error",
      errorLoadTodos: "Cannot load todo list",
      errorSaveTodos: "Cannot save todo list",
      errorExport: "Cannot export todo list",
      errorDelete: "Cannot delete todos",
      learnFileSystemAPI: "Learn File System API",
      trySaveTodos: "Try saving todos",
    },
    features: {
      title: "File System Features",
      jsonStorage: "JSON Format Storage",
      autoPersistence: "Auto Persistence",
      fileBackup: "File Backup",
    },
  },
  gestures: {
    title: "Gesture Interaction Example",
    info: "React Native Gesture Handler provides a set of APIs for handling touch gestures, built on native platform capabilities for better performance and flexibility.",
    panGesture: "Pan Gesture",
    pinchGesture: "Pinch Gesture",
    doubleTapGesture: "Double Tap Gesture",
    longPressGesture: "Long Press Gesture",
    dragMe: "Drag Me",
    doubleTapMe: "Double Tap Me",
    longPressMe: "Long Press Me",
    longPressAlert: "Long Press Triggered",
    longPressMessage: "Long press gesture recognized!",
  },
  animation: {
    title: "Animation Example",
    info: "Reanimated is a declarative animation library that can create smooth, high-performance animations. Below are various common animation effects.",
    basicAnimation: "Basic Animation",
    sequenceAnimation: "Sequence Animation",
    repeatAnimation: "Repeat Animation",
    builtInAnimation: "Built-in Animation",
    scrollAnimation: "Scroll Animation",
    clickExpand: "Click to Expand",
    clickCollapse: "Click to Collapse",
    springDescription: "Using withSpring for elastic animation effects",
    sequenceDescription:
      "Combining multiple animations with withSequence and withDelay",
    repeatDescription: "Using withRepeat for loop animation effects",
    builtInDescription:
      "Using built-in animations and Layout for list transitions",
    scrollDescription: "Try scrolling up and down to see the effect",
    playAnimation: "Play Animation",
    playingAnimation: "Playing...",
    enableAnimation: "Enable Animation",
    add: "Add",
    remove: "Remove",
  },
  blurView: {
    title: "BlurView Example",
    info: "BlurView is a React component that can blur its underlying content. Commonly used in navigation bars, tab bars, and modals.",
    androidNote: "Note: BlurView on Android is an experimental feature.",
    intensity: "Blur Intensity",
    tintMode: "Tint Mode",
    androidBlurToggle: "Enable Android Experimental Blur",
    blurReductionFactor: "Blur Reduction Factor",
    useRadius: "Use Rounded Corners (overflow: hidden)",
    blurredContent: "Blurred Content Example",
    differentIntensities: "Different Intensities",
    intensity25: "Intensity: 25",
    intensity50: "Intensity: 50",
    intensity100: "Intensity: 100",
    tipsTitle: "Usage Tips",
    tip1: "1. Use the intensity property (1-100) to control blur strength.",
    tip2: "2. Use the tint property to set the tint (light, dark, default, etc.).",
    tip3: "3. On Android, enable experimental support using the experimentalBlurMethod property.",
    tip4: "4. Use blurReductionFactor to adjust blur strength on Android.",
    tip5: "5. For rounded corners, add overflow: 'hidden' style.",
    tip6: "6. When using FlatList or other dynamic content, ensure BlurView renders behind it.",
  },
  camera: {
    title: "Camera Example",
    info: "Camera Features",
    preview: "Preview",
    permissions: {
      needPermission: "Camera permission is required to use this feature",
      grantPermission: "Grant Permission",
    },
    controls: {
      switchCamera: "Switch front/back camera",
      flash: "Toggle flash mode (off/on/auto)",
      torch: "Turn torch on/off (rear camera only)",
      focus: "Toggle autofocus mode",
      barcode: "Enable/disable barcode scanning",
      zoom: "Adjust camera zoom",
      mode: "Switch photo/video mode",
      middleButton: "Take photo or start/stop recording",
      pauseCamera: "Pause/resume camera preview",
    },
    scanResult: "Scan Result",
    scanType: "Type",
    scanData: "Data",
    continueScan: "Continue Scanning",
    confirm: "Confirm",
    recordingSuccess: "Success",
    videoSaved: "Video has been saved to gallery",
    recordingError: "Error",
    recordingFailed: "Recording failed, please try again",
  },
  captureRef: {
    title: "View Capture Example",
    info: "Create signatures, add stickers, and capture the result as an image",
    canvas: {
      drawHere: "Draw your signature here",
      clear: "Clear",
      addSticker: "Add Sticker",
      clearStickers: "Clear Stickers",
      deleteSticker: "Delete Selected",
      capture: "Capture as Image",
    },
    preview: {
      title: "Image Preview",
      save: "Save to Gallery",
      share: "Share",
      back: "Back to Canvas",
    },
    saveSuccess: "Image saved successfully",
    saveError: "Failed to save image",
    shareTitle: "Share Your Creation",
    permissionRequired: "Storage permission is required",
    processing: "Processing...",
  },
  imagePicker: {
    title: "Image Picker Example",
    info: "The Image Picker API provides access to the device's media library and camera for selecting images or videos.",
    intro: {
      title: "Key Features",
      feature1: "Access device photo library",
      feature2: "Take photos directly with camera",
      feature3: "Support for iOS Live Photos",
      feature4: "Tap preview button to see brief animation effect",
      feature5:
        "A special photo format on iOS devices that includes both a static image and a 1.5-second video from before and after the photo was taken.",
    },
    actions: {
      selectImage: "Select from Library",
      takePhoto: "Take a Photo",
      selectMultiple: "Select Multiple Images",
      allowEditing: "Allow Editing",
      aspectRatio: "Aspect Ratio:",
      quality: "Quality:",
      noImageSelected: "No image selected",
      permissionRequired: "Camera and media library permissions are required",
      requestPermission: "Request Permissions",
    },
    results: {
      selected: "Image",
      selectedMultiple: "Selected Images",
      fileName: "File Name",
      fileSize: "File Size",
      fileType: "File Type",
      dimensions: "Dimensions",
    },
    errors: {
      cancelled: "Image selection cancelled",
      noImage: "No image was selected",
      failed: "Image selection failed",
    },
  },
};
